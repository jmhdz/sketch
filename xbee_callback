# The following lines require manual changes 
username = "#########" # enter your username
password = "#########" # enter your password
#This example establishes a https connection, but it doesn't provide the server certificate validation.
#Production code shoudl implement certificate validation.
#-------------------------------------------------------
import httplib
import base64

#create HTTP basic authentication string, this consist of
# "username:password" base64 encoded
auth = base64.encodestring("%s:%s"%(username,password))[:-1]

# message to send to server
message = """<!--
See http://www.digi.com/wiki/developer/index.php/Rci for
an example of a python implementation on a NDS device to
handle this SCI request
-->
<sci_request version="1.0">
  <send_message>
    <targets>
      <device id="00000000-00000000-########-########"/>
    </targets>
    <rci_request version="1.1">
      <do_command target="xig">
	<at hw_address="00:13:a2:00:##:##:##:##!" command="D0" value="5" apply="true" />
      </do_command>
    </rci_request>
  </send_message>
</sci_request>
"""

webservice = httplib.HTTPSConnection("developer.idigi.com")


# to what URL to send the request with a given HTTP method

webservice.putrequest("POST", "/ws/sci")

# add the authorization string into the HTTP header

webservice.putheader("Authorization", "Basic %s"%auth)
webservice.putheader("Accept","application/xml")
webservice.putheader("Content-type", "text/xml; charset=\"UTF-8\"")
webservice.putheader("Content-length", "%d" % len(message))
webservice.endheaders()
webservice.send(message)

# get the response
response = webservice.getresponse()
statuscode = response.status
statusmessage = response.reason
response_body = response.read()

# print the output to standard out
print (statuscode, statusmessage)
print response_body
